#!/usr/bin/python3

import sys
import time
import os
import re

# installed packages
from pwn import *
import argparse

# declare script path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# custom package
import pre_settings
import pre_ping_check
import pre_services_check
import pre_attacks
import pre_services_restart

# displays only critical errors or important information
context.log_level = pre_settings.debug_critical

def exploit(rhost, rport, attacks):
    try:
        status_ping = pre_ping_check.check(rhost)
        status_service_pre = pre_services_check.check(rhost, rport)

        if not status_service_pre:
            log.info(pre_settings.print_status_service_cleanup(rport, attacks['service'], status_service_pre, 'pre'))
            status_pre_service_restart = pre_services_restart.restart_service(rhost, attacks["path"])
            time.sleep(3)

        status_service_pre = pre_services_check.check(rhost, rport)

        attacks['status (ping)'] = 'UP' if status_ping else 'DOWN'
        attacks['status (service)'] = 'UP' if status_service_pre else 'DOWN'

        if status_service_pre:
            try:
                # nmap_command = [pre_settings.NMAP_PATH, f'-p{str(rport)}', rhost, '-Pn', '-A', '-sS', '-sV', '-sC', '-O', '--version-intensity', '9', '-T5', '--scan-delay', '0', '--max-retries', '0', '--max-scan-delay', '0', '--min-rate', '10000', '-v', '--script', 'vuln']
                nmap_command = [pre_settings.NMAP_PATH, f'-p{str(rport)}', rhost, '-Pn']
                nmap_process = subprocess.run(nmap_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True, timeout=30)

                output = nmap_process.stdout
                status_service_post = pre_services_check.check(rhost, rport)
                status_attack = False

                open_port = re.search(r'{0}\/tcp.*?open'.format(rport), output)

                if open_port is not None:
                    attacks['status (attack)'] = 'UNBLOCKED'
                    attacks['remark'] = pre_attacks.success_nmap
                    status_attack = True
                else:
                    attacks['remark'] = pre_attacks.fail_nmap

                # cleanup and restart the service
                time.sleep(2)
                log.info(pre_settings.print_status_service_cleanup(rport, attacks['service'], pre_services_check.check(rhost, rport), 'cleanup'))
                status_post_service_restart = pre_services_restart.restart_service(rhost, attacks["path"])

                print(pre_settings.print_status_attack(rhost, rport, attacks['service'], attacks['attack'], attacks['type'], status_ping, status_service_pre, status_attack, status_service_post, attacks['remark']))
                return attacks
            
            except (FileNotFoundError, ValueError, PermissionError) as e:
                log.error(str(e))
                sys.exit(1)

            except (subprocess.SubprocessError, subprocess.TimeoutExpired, pwnlib.exception.PwnlibException, Exception) as e:
                log.error(str(e))
                sys.exit(1)

        else:
            attacks['remark'] = pre_attacks.fail_service_down
            print(pre_settings.print_status_attack(rhost, rport, attacks['service'], attacks['attack'], attacks['type'], status_ping, status_service_pre, False, status_service_pre, attacks['remark']))

            return attacks

    except KeyboardInterrupt:
        sys.exit(0)

def main():
    try:
        # Get both attack details
        attack_ssh = pre_attacks.attacks.get('nmap_ssh')
        attack_samba = pre_attacks.attacks.get('nmap_samba')

        parser = argparse.ArgumentParser(description=pre_settings.print_argparse_desc(attack_ssh['attack']), epilog=f'{pre_settings.print_argparse_epilog(f"python3 {sys.argv[0]} --rhost 10.251.5.5")}')
        parser.add_argument('--rhost', help='Target IP', default='10.251.5.5')
        args = parser.parse_args()

        rhost = args.rhost

        # Run both attacks
        rport = attack_ssh['port']
        exploit(rhost, rport, attack_ssh)

        for rport in attack_samba['port']:
            exploit(rhost, rport, attack_samba)

    except KeyboardInterrupt:
        sys.exit(0)


if __name__ == '__main__':
    main()